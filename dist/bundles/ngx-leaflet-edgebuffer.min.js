/*! ngx-leaflet-edgebuffer - 1.0.6 - Copyright Alex Paterson, 2018 - All Rights Reserved. + */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("leaflet-edgebuffer"),require("@asymmetrik/ngx-leaflet")):"function"==typeof define&&define.amd?define(["exports","@angular/core","leaflet-edgebuffer","@asymmetrik/ngx-leaflet"],t):t(e.ngxLeafletEdgeBuffer={},e.ng.core,null,e.ngxLeaflet)}(this,function(e,t,r,n){"use strict";
// import * as L from 'leaflet';
var f=/** @class */function(){
// Filter Control
// filterControl: L.Control.FilterControl;
// featureGroup: L.FeatureGroup;
// Constructor options for Filter Control
// @Input('leafletEdgeBufferOptions') filterOptions: L.Control.FilterControlOptions = null;
// Filter state
// @Input('leafletEdgeBufferState') filterState: any;
// Event Emitter for filter state change events
// @Output('leafletEdgeBufferStateChange') filterStateChange = new EventEmitter<any>();
// Event for when the filter control is created and ready
// @Output('leafletEdgeBufferControlReady') controlReady = new EventEmitter<L.Control.FilterControl>();
function e(e){this.leafletDirective=new n.LeafletDirectiveWrapper(e)}return e.prototype.ngOnInit=function(){this.leafletDirective.init();
// Initialize the draw options (in case they weren't provided)
/*this.filterOptions = this.initializeFilterOptions(this.filterOptions);

        // Create the control
        this.filterControl =  L.control.filter(this.filterOptions);

        // Pull out the feature group for convenience
        this.featureGroup = this.filterOptions.featureGroup;

        // Add the control to the map
        this.filterControl.addTo(this.leafletDirective.getMap());

        // Register the main handler for events coming from the draw plugin
        this.leafletDirective.getMap().on('filter:filter', (e: any) => {
            setTimeout(() => { this.filterStateChange.emit(e.geo); });
        });

        // Set the initial filter state
        this.filterControl.setFilter(this.filterState);

        // Fire control ready event
        this.controlReady.emit(this.filterControl);*/},
/*initializeFilterOptions(options: L.Control.FilterControlOptions) {

        // Ensure the options have a featureGroup
        if (null == options) {
            options = {
                featureGroup: null
            };
        }
        if (null == options.featureGroup) {
            // No feature group was provided, so we're going to add it ourselves
            options.featureGroup = L.featureGroup();
            this.leafletDirective.getMap().addLayer(options.featureGroup);
        }

        return options;
    }*/
e.decorators=[{type:t.Directive,args:[{selector:"[leafletEdgeBuffer]"}]}],
/** @nocollapse */
e.ctorParameters=function(){return[{type:n.LeafletDirective}]},e}(),o=/** @class */function(){function e(){}return e.forRoot=function(){return{ngModule:e,providers:[]}},e.decorators=[{type:t.NgModule,args:[{exports:[f],declarations:[f]}]}],
/** @nocollapse */
e.ctorParameters=function(){return[]},e}();e.LeafletEdgeBufferModule=o,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-leaflet-edgebuffer.js.map