{"version":3,"file":"ngx-leaflet-edgebuffer.js","sources":["../leaflet-edgebuffer/core/leaflet-edgebuffer.directive.js","../leaflet-edgebuffer/leaflet-edgebuffer.module.js"],"sourcesContent":["import { Directive } from '@angular/core';\r\n// import * as L from 'leaflet';\r\nimport 'leaflet-edgebuffer';\r\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\r\nvar LeafletEdgeBufferDirective = /** @class */ (function () {\r\n    // Filter Control\r\n    // filterControl: L.Control.FilterControl;\r\n    // featureGroup: L.FeatureGroup;\r\n    // Constructor options for Filter Control\r\n    // @Input('leafletEdgeBufferOptions') filterOptions: L.Control.FilterControlOptions = null;\r\n    // Filter state\r\n    // @Input('leafletEdgeBufferState') filterState: any;\r\n    // Event Emitter for filter state change events\r\n    // @Output('leafletEdgeBufferStateChange') filterStateChange = new EventEmitter<any>();\r\n    // Event for when the filter control is created and ready\r\n    // @Output('leafletEdgeBufferControlReady') controlReady = new EventEmitter<L.Control.FilterControl>();\r\n    function LeafletEdgeBufferDirective(leafletDirective) {\r\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\r\n    }\r\n    LeafletEdgeBufferDirective.prototype.ngOnInit = function () {\r\n        this.leafletDirective.init();\r\n        // Initialize the draw options (in case they weren't provided)\r\n        /*this.filterOptions = this.initializeFilterOptions(this.filterOptions);\r\n\r\n        // Create the control\r\n        this.filterControl =  L.control.filter(this.filterOptions);\r\n\r\n        // Pull out the feature group for convenience\r\n        this.featureGroup = this.filterOptions.featureGroup;\r\n\r\n        // Add the control to the map\r\n        this.filterControl.addTo(this.leafletDirective.getMap());\r\n\r\n        // Register the main handler for events coming from the draw plugin\r\n        this.leafletDirective.getMap().on('filter:filter', (e: any) => {\r\n            setTimeout(() => { this.filterStateChange.emit(e.geo); });\r\n        });\r\n\r\n        // Set the initial filter state\r\n        this.filterControl.setFilter(this.filterState);\r\n\r\n        // Fire control ready event\r\n        this.controlReady.emit(this.filterControl);*/\r\n    };\r\n    /*initializeFilterOptions(options: L.Control.FilterControlOptions) {\r\n\r\n        // Ensure the options have a featureGroup\r\n        if (null == options) {\r\n            options = {\r\n                featureGroup: null\r\n            };\r\n        }\r\n        if (null == options.featureGroup) {\r\n            // No feature group was provided, so we're going to add it ourselves\r\n            options.featureGroup = L.featureGroup();\r\n            this.leafletDirective.getMap().addLayer(options.featureGroup);\r\n        }\r\n\r\n        return options;\r\n    }*/\r\n    LeafletEdgeBufferDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[leafletEdgeBuffer]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletEdgeBufferDirective.ctorParameters = function () { return [\r\n        { type: LeafletDirective, },\r\n    ]; };\r\n    return LeafletEdgeBufferDirective;\r\n}());\r\nexport { LeafletEdgeBufferDirective };\r\n//# sourceMappingURL=leaflet-edgebuffer.directive.js.map","import { NgModule } from '@angular/core';\r\nimport { LeafletEdgeBufferDirective } from './core/leaflet-edgebuffer.directive';\r\nvar LeafletEdgeBufferModule = /** @class */ (function () {\r\n    function LeafletEdgeBufferModule() {\r\n    }\r\n    LeafletEdgeBufferModule.forRoot = function () {\r\n        return { ngModule: LeafletEdgeBufferModule, providers: [] };\r\n    };\r\n    LeafletEdgeBufferModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    exports: [\r\n                        LeafletEdgeBufferDirective\r\n                    ],\r\n                    declarations: [\r\n                        LeafletEdgeBufferDirective\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    LeafletEdgeBufferModule.ctorParameters = function () { return []; };\r\n    return LeafletEdgeBufferModule;\r\n}());\r\nexport { LeafletEdgeBufferModule };\r\n//# sourceMappingURL=leaflet-edgebuffer.module.js.map"],"names":["LeafletDirectiveWrapper","Directive","LeafletDirective","NgModule"],"mappings":";;;;;;;AACA;AACA,AAEA,IAAI,0BAA0B,kBAAkB,YAAY;;;;;;;;;;;;IAYxD,SAAS,0BAA0B,CAAC,gBAAgB,EAAE;QAClD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,kCAAuB,CAAC,gBAAgB,CAAC,CAAC;KACzE;IACD,0BAA0B,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAY;QACxD,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;KAuBhC,CAAC;;;;;;;;;;;;;;;;;IAiBF,0BAA0B,CAAC,UAAU,GAAG;QACpC,EAAE,IAAI,EAAEC,cAAS,EAAE,IAAI,EAAE,CAAC;oBACd,QAAQ,EAAE,qBAAqB;iBAClC,EAAE,EAAE;KAChB,CAAC;;IAEF,0BAA0B,CAAC,cAAc,GAAG,YAAY,EAAE,OAAO;QAC7D,EAAE,IAAI,EAAEC,2BAAgB,GAAG;KAC9B,CAAC,EAAE,CAAC;IACL,OAAO,0BAA0B,CAAC;CACrC,EAAE,CAAC;;ACpEJ,IAAI,uBAAuB,kBAAkB,YAAY;IACrD,SAAS,uBAAuB,GAAG;KAClC;IACD,uBAAuB,CAAC,OAAO,GAAG,YAAY;QAC1C,OAAO,EAAE,QAAQ,EAAE,uBAAuB,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;KAC/D,CAAC;IACF,uBAAuB,CAAC,UAAU,GAAG;QACjC,EAAE,IAAI,EAAEC,aAAQ,EAAE,IAAI,EAAE,CAAC;oBACb,OAAO,EAAE;wBACL,0BAA0B;qBAC7B;oBACD,YAAY,EAAE;wBACV,0BAA0B;qBAC7B;iBACJ,EAAE,EAAE;KAChB,CAAC;;IAEF,uBAAuB,CAAC,cAAc,GAAG,YAAY,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IACpE,OAAO,uBAAuB,CAAC;CAClC,EAAE,CAAC;;;;;;;;;;;;"}