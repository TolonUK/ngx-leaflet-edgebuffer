{"version":3,"file":"ngx-leaflet-edgebuffer.js","sources":["../leaflet-edgebuffer/core/leaflet-edgebuffer.directive.js","../leaflet-edgebuffer/leaflet-edgebuffer.module.js"],"sourcesContent":["import { Directive, Input } from '@angular/core';\n// import * as L from 'leaflet';\nimport 'leaflet-edgebuffer';\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\nvar LeafletEdgeBufferDirective = /** @class */ (function () {\n    // Filter state\n    // @Input('leafletEdgeBufferState') filterState: any;\n    // Event Emitter for filter state change events\n    // @Output('leafletEdgeBufferStateChange') filterStateChange = new EventEmitter<any>();\n    // Event for when the filter control is created and ready\n    // @Output('leafletEdgeBufferControlReady') controlReady = new EventEmitter<L.Control.FilterControl>();\n    function LeafletEdgeBufferDirective(leafletDirective) {\n        // Filter Control\n        // filterControl: L.Control.FilterControl;\n        // featureGroup: L.FeatureGroup;\n        // Constructor options for Filter Control\n        this.edgeBufferOptions = null;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    LeafletEdgeBufferDirective.prototype.ngOnInit = function () {\n        this.leafletDirective.init();\n        // Initialize the draw options (in case they weren't provided)\n        /*this.filterOptions = this.initializeFilterOptions(this.filterOptions);\n\n        // Create the control\n        this.filterControl =  L.control.filter(this.filterOptions);\n\n        // Pull out the feature group for convenience\n        this.featureGroup = this.filterOptions.featureGroup;\n\n        // Add the control to the map\n        this.filterControl.addTo(this.leafletDirective.getMap());\n\n        // Register the main handler for events coming from the draw plugin\n        this.leafletDirective.getMap().on('filter:filter', (e: any) => {\n            setTimeout(() => { this.filterStateChange.emit(e.geo); });\n        });\n\n        // Set the initial filter state\n        this.filterControl.setFilter(this.filterState);\n\n        // Fire control ready event\n        this.controlReady.emit(this.filterControl);*/\n    };\n    /*initializeFilterOptions(options: L.Control.FilterControlOptions) {\n\n        // Ensure the options have a featureGroup\n        if (null == options) {\n            options = {\n                featureGroup: null\n            };\n        }\n        if (null == options.featureGroup) {\n            // No feature group was provided, so we're going to add it ourselves\n            options.featureGroup = L.featureGroup();\n            this.leafletDirective.getMap().addLayer(options.featureGroup);\n        }\n\n        return options;\n    }*/\n    LeafletEdgeBufferDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[leafletEdgeBuffer]'\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletEdgeBufferDirective.ctorParameters = function () { return [\n        { type: LeafletDirective, },\n    ]; };\n    LeafletEdgeBufferDirective.propDecorators = {\n        'edgeBufferOptions': [{ type: Input, args: ['leafletEdgeBufferOptions',] },],\n    };\n    return LeafletEdgeBufferDirective;\n}());\nexport { LeafletEdgeBufferDirective };\n//# sourceMappingURL=leaflet-edgebuffer.directive.js.map","import { NgModule } from '@angular/core';\nimport { LeafletEdgeBufferDirective } from './core/leaflet-edgebuffer.directive';\nvar LeafletEdgeBufferModule = /** @class */ (function () {\n    function LeafletEdgeBufferModule() {\n    }\n    LeafletEdgeBufferModule.forRoot = function () {\n        return { ngModule: LeafletEdgeBufferModule, providers: [] };\n    };\n    LeafletEdgeBufferModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [\n                        LeafletEdgeBufferDirective\n                    ],\n                    declarations: [\n                        LeafletEdgeBufferDirective\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletEdgeBufferModule.ctorParameters = function () { return []; };\n    return LeafletEdgeBufferModule;\n}());\nexport { LeafletEdgeBufferModule };\n//# sourceMappingURL=leaflet-edgebuffer.module.js.map"],"names":["LeafletDirectiveWrapper","Directive","LeafletDirective","Input","NgModule"],"mappings":";;;;;;;AACA;AACA,AAEA,IAAI,0BAA0B,kBAAkB,YAAY;;;;;;;IAOxD,SAAS,0BAA0B,CAAC,gBAAgB,EAAE;;;;;QAKlD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAIA,kCAAuB,CAAC,gBAAgB,CAAC,CAAC;KACzE;IACD,0BAA0B,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAY;QACxD,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;KAuBhC,CAAC;;;;;;;;;;;;;;;;;IAiBF,0BAA0B,CAAC,UAAU,GAAG;QACpC,EAAE,IAAI,EAAEC,cAAS,EAAE,IAAI,EAAE,CAAC;oBACd,QAAQ,EAAE,qBAAqB;iBAClC,EAAE,EAAE;KAChB,CAAC;;IAEF,0BAA0B,CAAC,cAAc,GAAG,YAAY,EAAE,OAAO;QAC7D,EAAE,IAAI,EAAEC,2BAAgB,GAAG;KAC9B,CAAC,EAAE,CAAC;IACL,0BAA0B,CAAC,cAAc,GAAG;QACxC,mBAAmB,EAAE,CAAC,EAAE,IAAI,EAAEC,UAAK,EAAE,IAAI,EAAE,CAAC,0BAA0B,EAAE,EAAE,EAAE;KAC/E,CAAC;IACF,OAAO,0BAA0B,CAAC;CACrC,EAAE,CAAC;;ACvEJ,IAAI,uBAAuB,kBAAkB,YAAY;IACrD,SAAS,uBAAuB,GAAG;KAClC;IACD,uBAAuB,CAAC,OAAO,GAAG,YAAY;QAC1C,OAAO,EAAE,QAAQ,EAAE,uBAAuB,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;KAC/D,CAAC;IACF,uBAAuB,CAAC,UAAU,GAAG;QACjC,EAAE,IAAI,EAAEC,aAAQ,EAAE,IAAI,EAAE,CAAC;oBACb,OAAO,EAAE;wBACL,0BAA0B;qBAC7B;oBACD,YAAY,EAAE;wBACV,0BAA0B;qBAC7B;iBACJ,EAAE,EAAE;KAChB,CAAC;;IAEF,uBAAuB,CAAC,cAAc,GAAG,YAAY,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IACpE,OAAO,uBAAuB,CAAC;CAClC,EAAE,CAAC;;;;;;;;;;;;"}